// Generated by ChatGPT
// Compile with: g++ -o ex ex.cpp -lpcap
#include <pcap.h>
#include <iostream>
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <cstring>
#include <map>
#include <vector>
#include <fstream>

#define PCAP_FILE "chall.pcapng"
#define UDP_HEADER_SIZE 8
#define SEQUENCE_SIZE 4
#define MAX_DATA_SIZE 512
#define OUTPUT_FILE "out.png"

std::map<uint32_t, std::vector<u_char>> dataMap;

void packetHandler(u_char *userData, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    struct ip *ipHeader = (struct ip *)(packet + 14); // Assuming Ethernet header is 14 bytes
    if (ipHeader->ip_p != IPPROTO_UDP) {
        return; // Not a UDP packet
    }

    struct udphdr *udpHeader = (struct udphdr *)((u_char *)ipHeader + (ipHeader->ip_hl * 4));
    const u_char *payload = (u_char *)udpHeader + UDP_HEADER_SIZE;
    int payloadLength = ntohs(udpHeader->uh_ulen) - UDP_HEADER_SIZE;
    
    if (payloadLength < SEQUENCE_SIZE) {
        return; // Not enough data
    }

    uint32_t sequenceNumber;
    std::memcpy(&sequenceNumber, payload, SEQUENCE_SIZE);
    sequenceNumber = ntohl(sequenceNumber);
    
    int dataLength = std::min(payloadLength - SEQUENCE_SIZE, MAX_DATA_SIZE);
    std::vector<u_char> data(payload + SEQUENCE_SIZE, payload + SEQUENCE_SIZE + dataLength);
    
    dataMap[sequenceNumber] = data;
}

void saveToFile() {
    std::ofstream outFile(OUTPUT_FILE, std::ios::binary);
    if (!outFile) {
        std::cerr << "Error opening output file: " << OUTPUT_FILE << std::endl;
        return;
    }

    for (const auto &entry : dataMap) {
        outFile.write(reinterpret_cast<const char*>(entry.second.data()), entry.second.size());
    }
    
    outFile.close();
    std::cout << "Saved output to " << OUTPUT_FILE << "\n";
}

int main() {
    char errbuf[PCAP_ERRBUF_SIZE];
    pcap_t *handle = pcap_open_offline(PCAP_FILE, errbuf);
    if (handle == nullptr) {
        std::cerr << "Error opening file: " << errbuf << std::endl;
        return 1;
    }

    pcap_loop(handle, 0, packetHandler, nullptr);
    pcap_close(handle);
    
    saveToFile();
    
    return 0;
}
