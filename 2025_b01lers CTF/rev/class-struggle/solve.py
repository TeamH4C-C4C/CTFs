
def rol(val, r):
    return ((val << r) & 0xFF) | (val >> (8 - r))

def ror(val, r):
    return ((val >> r) & 0xFF) | ((val << (8 - r)) & 0xFF)

pre = [
    0x32, 0xC0, 0xBF, 0x6C, 0x61, 0x85, 0x5C, 0xE4, 0x40, 0xD0, 0x8F, 0xA2,
    0xEF, 0x7C, 0x4A, 0x02, 0x04, 0x9F, 0x37, 0x18, 0x68, 0x97, 0x39, 0x33,
    0xBE, 0xF1, 0x20, 0xF1, 0x40, 0x83, 0x06, 0x7E, 0xF1, 0x46, 0xA6, 0x47,
    0xFE, 0xC3, 0xC8, 0x67, 0x04, 0x4D, 0xBA, 0x10, 0x9B, 0x33
]

flag = []
for i, e in enumerate(pre):
    R = i % 8
    M = rol(e, R) & 0xFF
    
    high = M & 0xF0
    low = (~M) & 0x0F
    z = high | low
    
    y = (z - 42) & 0xFF
    
    S = (i + 3) % 7
    c_xor = ror(y, S)
    
    c = c_xor ^ ((i * 37) & 0xFF)
    
    flag.append(c)

flag_bytes = bytes(flag)
print("Recovered flag:", flag_bytes)
print("As ASCII:", flag_bytes.decode('ascii'))
